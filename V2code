#include <Arduino.h>
#include <WiFi.h>
#include <ESPAsyncWebServer.h>
#include <AsyncTCP.h>
#include <ArduinoJson.h>
#include "EmonLib.h"
#include <Preferences.h>
#include "driver/ledc.h"

// ================== EMBEDDED WEB UI ==================
// WiFi setup page
const char wifiSetupHTML[] PROGMEM = R"rawliteral(
<!DOCTYPE html><html><head>
<meta name="viewport" content="width=device-width, initial-scale=1">
<title>WiFi Setup - Mixer Grinder</title>
<style>
body{font-family:Arial,sans-serif;background:#f8f8f8;}
.container{max-width:350px;margin:auto;margin-top:40px;background:#fff;padding:20px;border-radius:8px;box-shadow:0 0 5px rgba(0,0,0,0.1);}
input{width:100%;padding:10px;margin:6px 0;box-sizing:border-box;}
button{padding:10px;background:#4CAF50;border:none;color:#fff;width:100%;border-radius:4px;font-size:16px;}
h2{text-align:center;}
</style>
</head><body>
<div class="container">
<h2>WiFi Setup</h2>
<form action="/savewifi" method="POST">
<input type="text" name="ssid" placeholder="WiFi SSID" required>
<input type="password" name="pass" placeholder="Password" required>
<button type="submit">Save & Connect</button>
</form>
</div>
</body></html>
)rawliteral";

// Main UI page with Run buttons
const char indexHTML[] PROGMEM = R"rawliteral(
<!DOCTYPE html><html><head>
<meta name="viewport" content="width=device-width,initial-scale=1">
<title>Smart Mixer Grinder</title>
<style>
body{font-family:Arial,sans-serif;background:#f0f2f5;margin:0;}
header{background:#4CAF50;color:#fff;padding:15px;font-size:20px;text-align:center;}
.menu{background:#333;overflow:hidden;display:flex;}
.menu button{flex:1;padding:14px;background:#333;color:#fff;border:none;font-size:16px;cursor:pointer;}
.menu button:hover{background:#111;}
.section{display:none;padding:20px;}
.active{display:block;}
h2{margin-top:0;}
.card{background:#fff;padding:15px;border-radius:8px;margin-bottom:15px;box-shadow:0 1px 3px rgba(0,0,0,0.1);}
label{display:block;margin-top:10px;}
input,select,textarea{width:100%;padding:8px;box-sizing:border-box;margin-top:6px;}
button.action{margin-top:10px;padding:10px;background:#4CAF50;color:#fff;border:none;border-radius:4px;cursor:pointer;}
.toggle{display:flex;align-items:center;margin-top:8px;}
.toggle input{margin-left:10px;}
.stats{font-size:16px;line-height:1.5;}
.recipe{border:1px solid #ddd;padding:10px;border-radius:5px;margin-bottom:10px;background:#fafafa;}
.recipe-details{margin-top:10px;display:none;}
.recipe:hover .recipe-details{display:block;}
.recipe button.run-button{margin-top:10px;padding:6px 12px;background:#007bff;color:#fff;border:none;border-radius:4px;cursor:pointer;}
</style>
</head><body>
<header>Smart Mixer Grinder</header>
<div class="menu">
  <button onclick="showSection('home')">Home</button>
  <button onclick="showSection('myrecipes')">My Recipes</button>
  <button onclick="showSection('publicrecipes')">Public Recipes</button>
</div>

<div id="home" class="section active">
  <div class="card">
    <h2>Motor Speed</h2>
    <select id="motorSpeed" onchange="updateMotorSpeed()">
      <option value="0">Off</option>
      <option value="1">Level 1 (30%)</option>
      <option value="2">Level 2 (60%)</option>
      <option value="3">Level 3 (100%)</option>
    </select>
    <h2>UV Sterilization</h2>
    <label class="toggle">Enable UV <input type="checkbox" id="uvToggle" onchange="updateUV()"></label>
  </div>
  <div class="card stats">
    <h2>Power Stats</h2>
    Voltage: <span id="voltage">--</span> V<br>
    Current: <span id="current">--</span> A<br>
    Power: <span id="power">--</span> W<br>
    Recipe Running: <span id="recipeStatus">No</span>
  </div>
</div>

<div id="myrecipes" class="section">
  <div class="card">
    <h2>Create Recipe</h2>
    <input type="text" id="recipeName" placeholder="Recipe Name">
    <textarea id="ingredients" placeholder="Ingredients (name,weight,calories per line)"></textarea>
    <input type="number" id="servingSize" placeholder="Serving Size">
    <select id="recipeMotorSpeed">
      <option value="1">Level 1 (30%)</option>
      <option value="2">Level 2 (60%)</option>
      <option value="3">Level 3 (100%)</option>
    </select>
    <input type="number" id="recipeTime" placeholder="Run Time (seconds)">
    <button class="action" onclick="saveRecipe()">Save Recipe</button>
  </div>
  <div id="recipeList"></div>
</div>

<div id="publicrecipes" class="section">
  <div class="card">
    <h2>Public Recipes</h2>
    <button class="action" onclick="loadPublicRecipes()">Load from Internet</button>
    <div id="publicList"></div>
  </div>
</div>

<script>
let ws;

function initWebSocket() {
  ws = new WebSocket('ws://' + window.location.host + '/ws');
  ws.onmessage = function(evt) {
    let data = JSON.parse(evt.data);
    document.getElementById("voltage").innerText = data.voltage.toFixed(2);
    document.getElementById("current").innerText = data.current.toFixed(2);
    document.getElementById("power").innerText = data.power.toFixed(2);
    document.getElementById("motorSpeed").value = data.motorSpeed;
    document.getElementById("uvToggle").checked = data.uvOn;
    document.getElementById("recipeStatus").innerText = data.running ? 'Yes' : 'No';
  };
}

function showSection(id) {
  document.querySelectorAll('.section').forEach(s => s.classList.remove('active'));
  document.getElementById(id).classList.add('active');
}

function updateMotorSpeed() {
  let val = parseInt(document.getElementById('motorSpeed').value);
  ws.send(JSON.stringify({motorSpeed: val}));
}

function updateUV() {
  let on = document.getElementById('uvToggle').checked;
  ws.send(JSON.stringify({uvOn: on}));
}

function saveRecipe() {
  let name = document.getElementById('recipeName').value.trim();
  if (!name) { alert("Please enter a Recipe Name"); return; }
  let ingLines = document.getElementById('ingredients').value.trim().split("\n");
  let ingredients = ingLines.map(line => {
    let p = line.split(",");
    return { name: p[0].trim(), weight: p[1].trim(), calories: p[2].trim() };
  });
  let serving = parseInt(document.getElementById('servingSize').value);
  let speed = parseInt(document.getElementById('recipeMotorSpeed').value);
  let time = parseInt(document.getElementById('recipeTime').value);

  fetch('/api/recipes').then(r => r.json()).then(recipes => {
    recipes.push({ name, ingredients, serving, speed, time });
    return fetch('/api/recipes', {
      method: 'POST',
      headers: {'Content-Type':'application/json'},
      body: JSON.stringify(recipes)
    });
  }).then(() => {
    loadRecipes();
    alert("Recipe saved!");
  }).catch(e => alert("Error saving recipe: " + e));
}

function loadRecipes() {
  fetch('/api/recipes').then(r => r.json()).then(recipes => {
    let html = '';
    recipes.forEach((r,i) => {
      let totalCal = r.ingredients.reduce((a,b) => a + parseFloat(b.calories || 0), 0);
      html += `<div class="recipe">
        <b>${r.name}</b> - ${totalCal.toFixed(1)} Cal 
        <br><button onclick="runRecipe(${i})" class="run-button">Run</button>
        <button onclick="deleteRecipe(${i})" style="margin-left:5px;background:#dc3545;">Delete</button>
        <div class="recipe-details">
          Serving Size: ${r.serving}<br>
          Speed Level: ${r.speed}<br>
          Run Time: ${r.time} seconds<br>
          Ingredients:<br>`;
      r.ingredients.forEach(ing => {
        html += `- ${ing.name} ${ing.weight}g, ${ing.calories} Cal<br>`;
      });
      html += '</div></div>';
    });
    document.getElementById('recipeList').innerHTML = html;
  });
}

function deleteRecipe(index) {
  fetch('/api/recipes').then(r => r.json()).then(recipes => {
    recipes.splice(index, 1);
    return fetch('/api/recipes', {
      method: 'POST',
      headers: {'Content-Type':'application/json'},
      body: JSON.stringify(recipes)
    });
  }).then(() => loadRecipes());
}

function runRecipe(index) {
  fetch('/api/recipes').then(r => r.json()).then(recipes => {
    if (index >= 0 && index < recipes.length) {
      let r = recipes[index];
      fetch('/api/runrecipe', {
        method: 'POST',
        headers: {'Content-Type':'application/json'},
        body: JSON.stringify({speed: r.speed, time: r.time})
      }).then(() => alert("Recipe started! Motor will run for " + r.time + " seconds."));
    }
  });
}

function loadPublicRecipes() {
  fetch('/api/public').then(r => r.json()).then(data => {
    if (!Array.isArray(data)) data = [];
    let html = '';
    data.forEach(r => {
      let totalCal = r.ingredients.reduce((a,b) => a + parseFloat(b.calories || 0), 0);
      html += `<div class="recipe">
        <b>${r.name}</b> - ${totalCal.toFixed(1)} Cal 
        <br><button onclick='importRecipe(${JSON.stringify(r)})' class="run-button">Import</button>
      </div>`;
    });
    document.getElementById('publicList').innerHTML = html;
  });
}

function importRecipe(recipe) {
  fetch('/api/recipes').then(r => r.json()).then(recipes => {
    recipes.push(recipe);
    return fetch('/api/recipes', {
      method: 'POST',
      headers: {'Content-Type':'application/json'},
      body: JSON.stringify(recipes)
    });
  }).then(() => alert("Imported!"));
}

window.onload = function() {
  initWebSocket();
  loadRecipes();
}
</script>
</body></html>
)rawliteral";

// ================== PINS & SETTINGS ==================
#define MOTOR_PIN 25
#define UV_PIN 26

#define PWM_FREQ 5000
#define PWM_RES 8

#define V1 34
#define I1 35
#define CV1 1000
#define CI1 1000

Preferences preferences;
AsyncWebServer server(80);
AsyncWebSocket ws("/ws");
EnergyMonitor emon1;

bool isSTA = false;

uint8_t motorSpeedLevel = 0;
bool uvOn = false;
String recipesJSON = "[]";

bool recipeRunning = false;
unsigned long recipeEndTime = 0;

ledc_timer_config_t ledc_timer;
ledc_channel_config_t ledc_channel;

// ================== FUNCTIONS ==================
void setupPWM() {
  ledc_timer.speed_mode = LEDC_HIGH_SPEED_MODE;
  ledc_timer.timer_num = LEDC_TIMER_0;
  ledc_timer.duty_resolution = (ledc_timer_bit_t)PWM_RES;
  ledc_timer.freq_hz = PWM_FREQ;
  ledc_timer.clk_cfg = LEDC_AUTO_CLK;
  ledc_timer_config(&ledc_timer);

  ledc_channel.speed_mode = LEDC_HIGH_SPEED_MODE;
  ledc_channel.channel = LEDC_CHANNEL_0;
  ledc_channel.timer_sel = LEDC_TIMER_0;
  ledc_channel.intr_type = LEDC_INTR_DISABLE;
  ledc_channel.gpio_num = MOTOR_PIN;
  ledc_channel.duty = 0;
  ledc_channel.hpoint = 0;
  ledc_channel_config(&ledc_channel);
}

void setPWMDuty(uint8_t duty) {
  ledc_set_duty(ledc_channel.speed_mode, ledc_channel.channel, duty);
  ledc_update_duty(ledc_channel.speed_mode, ledc_channel.channel);
}

void setMotorSpeed(uint8_t level) {
  uint8_t duty = 0;
  if (level == 1) duty = 76;
  else if (level == 2) duty = 153;
  else if (level == 3) duty = 255;
  motorSpeedLevel = level;
  setPWMDuty(duty);
}

void setUV(bool on) {
  uvOn = on;
  digitalWrite(UV_PIN, uvOn ? HIGH : LOW);
}

String getPowerDataJSON() {
  emon1.calcVI(20, 2000);
  float voltage = emon1.Vrms;
  float current = emon1.Irms;
  float power = voltage * current;
  StaticJsonDocument<256> doc;
  doc["voltage"] = voltage;
  doc["current"] = current;
  doc["power"] = power;
  doc["motorSpeed"] = motorSpeedLevel;
  doc["uvOn"] = uvOn;
  doc["running"] = recipeRunning;
  String out;
  serializeJson(doc, out);
  return out;
}

void saveRecipesToFlash() {
  preferences.begin("recipes", false);
  preferences.putString("data", recipesJSON);
  preferences.end();
}

void loadRecipesFromFlash() {
  preferences.begin("recipes", true);
  recipesJSON = preferences.getString("data", "[]");
  preferences.end();
}

// ===== WiFi =====
String savedSSID, savedPASS;

void saveWiFiCredentials(String ssid, String pass) {
  preferences.begin("wifi", false);
  preferences.putString("ssid", ssid);
  preferences.putString("pass", pass);
  preferences.end();
}

bool loadWiFiCredentials() {
  preferences.begin("wifi", true);
  savedSSID = preferences.getString("ssid", "");
  savedPASS = preferences.getString("pass", "");
  preferences.end();
  return savedSSID.length() > 0;
}

bool connectToWiFi() {
  if (loadWiFiCredentials()) {
    WiFi.begin(savedSSID.c_str(), savedPASS.c_str());
    unsigned long startTime = millis();
    while (WiFi.status() != WL_CONNECTED && millis() - startTime < 10000) {
      delay(500);
    }
    return WiFi.status() == WL_CONNECTED;
  }
  return false;
}

// ===== Modes =====
void startAPMode() {
  WiFi.softAP("MixerGrinder_Setup", "12345678");
  server.on("/", HTTP_GET, [](AsyncWebServerRequest *request) {
    request->send_P(200, "text/html", wifiSetupHTML);
  });
  server.on("/savewifi", HTTP_POST, [](AsyncWebServerRequest *request) {
    if(request->hasParam("ssid", true) && request->hasParam("pass", true)) {
      saveWiFiCredentials(request->getParam("ssid", true)->value(),
                         request->getParam("pass", true)->value());
      request->send(200, "text/plain", "Saved! Rebooting...");
      delay(500);
      ESP.restart();
    }
  });
  server.begin();
}

void setupAPIRoutes() {
  server.on("/", HTTP_GET, [](AsyncWebServerRequest *request){
    request->send_P(200, "text/html", indexHTML);
  });

  ws.onEvent([](AsyncWebSocket *, AsyncWebSocketClient *, AwsEventType type,
                void *, uint8_t *data, size_t len) {
    if (type == WS_EVT_DATA) {
      String msg((char*)data, len);
      StaticJsonDocument<256> doc;
      if (!deserializeJson(doc, msg)) {
        if (doc.containsKey("motorSpeed")) setMotorSpeed(doc["motorSpeed"]);
        if (doc.containsKey("uvOn")) setUV(doc["uvOn"]);
      }
    }
  });
  server.addHandler(&ws);

  server.on("/api/power", HTTP_GET, [](AsyncWebServerRequest *req){
    req->send(200, "application/json", getPowerDataJSON());
  });

  server.on("/api/recipes", HTTP_GET, [](AsyncWebServerRequest *req){
    req->send(200, "application/json", recipesJSON);
  });

  server.on("/api/recipes", HTTP_POST, [](AsyncWebServerRequest *req){
    if(req->hasParam("plain", true)) {
      String body = req->getParam("plain", true)->value();
      StaticJsonDocument<2048> doc;
      if (!deserializeJson(doc, body)) {
        recipesJSON = body;
        saveRecipesToFlash();
        req->send(200, "text/plain", "Saved");
      } else req->send(400, "text/plain", "Invalid JSON");
    }
  });

  server.on("/api/runrecipe", HTTP_POST, [](AsyncWebServerRequest *req){
    if(req->hasParam("plain", true)) {
      String body = req->getParam("plain", true)->value();
      StaticJsonDocument<512> doc;
      if (!deserializeJson(doc, body) && doc.containsKey("speed") && doc.containsKey("time")) {
        setMotorSpeed(doc["speed"]);
        recipeEndTime = millis() + (doc["time"].as<unsigned long>() * 1000UL);
        recipeRunning = true;
        req->send(200, "text/plain", "Running recipe");
      } else req->send(400, "text/plain", "Invalid JSON");
    }
  });

  server.on("/api/public", HTTP_GET, [](AsyncWebServerRequest *req){
    // Stub, empty for now
    req->send(200, "application/json", "[]");
  });

  server.begin();
}

// ===== WebSocket notify =====
void notifyClients() {
  if(ws.count()>0){
    ws.textAll(getPowerDataJSON());
  }
}

// ===== Setup & Loop =====
void setup() {
  Serial.begin(115200);

  pinMode(UV_PIN, OUTPUT);
  setUV(false);

  setupPWM();
  setMotorSpeed(0);

  analogSetPinAttenuation(V1, ADC_11db);
  analogSetPinAttenuation(I1, ADC_11db);
  emon1.voltage(V1, CV1, 1.732);
  emon1.current(I1, CI1);

  loadRecipesFromFlash();

  if(connectToWiFi()){
    isSTA = true;
    setupAPIRoutes();
  } else {
    isSTA = false;
    startAPMode();
  }
}

void loop() {
  if(isSTA){
    static unsigned long lastNotify = 0;
    unsigned long now = millis();
    if(now-lastNotify > 2000){
      notifyClients();
      lastNotify = now;
    }
    // Stop the motor when recipe time expires
    if(recipeRunning && now >= recipeEndTime){
      setMotorSpeed(0);
      recipeRunning = false;
    }
  }
}
